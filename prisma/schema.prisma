// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Word {
  id         Int          @id @default(autoincrement())
  title      String?
  chapter    String? // 학년
  level      String // 난이도(레벨)
  wordClass  String? // 품사
  korean     String // 한국어 단어
  japanese   String[] // 일본어 단어들(히라가나, 카타카나, 한자 등 여러 표기)
  hiragana   String[] // 일본어 단어들(히라가나)
  katakana   String[] // 일본어 단어들(카타카나)
  kanzi      String[] // 한자 단어들
  english    String[] // 영어 단어들
  meaning    String? // 뜻(설명, 선택사항)
  GameRecord GameRecord[]
}

model GameRecord {
  id        Int      @id @default(autoincrement())
  wordId    Int
  word      Word     @relation(fields: [wordId], references: [id])
  player    String // 플레이어 이름 또는 식별자
  answer    String // 플레이어가 입력한 일본어 단어
  isCorrect Boolean // 정답 여부
  triedAt   DateTime @default(now()) // 시도 시간
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id          Int          @id @default(autoincrement())
  username    String       @unique
  email       String?      @unique
  password    String?
  phone       String?      @unique
  github_id   String?      @unique
  kakao_id    String?      @unique
  avatar      String?      @default("https://github.com/identicons/github.png")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  gameRecords GameRecord[]
  tokens      SMSToken[]
  posts       Post[]
  comments    Comment[]
  likes       Like[]
  chat_rooms  ChatRoom[]
  messages    Message[]
}

model SMSToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user_id   Int
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Post {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  views       Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  comments Comment[]
  likes    Like[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int
}

model Like {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int

  @@id(name: "id", [userId, postId])
}

model ChatRoom {
  id    String @id @default(cuid())
  users User[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model Message {
  id         String   @id @default(uuid())
  payload    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  status     String   @default("sent")
}
